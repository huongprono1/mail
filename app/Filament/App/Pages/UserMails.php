<?php

namespace App\Filament\App\Pages;

use App\Models\Mail;
use App\Traits\HasMailable;
use App\Traits\Toastable;
use CodeWithDennis\SimpleAlert\Components\Forms\SimpleAlert;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Pages\Page;
use Filament\Tables\Actions\BulkAction;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Support\Collection;

class UserMails extends Page implements HasForms, HasTable
{
    use HasMailable, InteractsWithForms, InteractsWithTable, Toastable;

    protected static ?string $navigationIcon = 'heroicon-o-envelope';

    protected static bool $shouldRegisterNavigation = true;

    protected static string $view = 'filament.app.pages.user-mails';

    protected static ?string $slug = 'my-mails';

    protected static ?int $navigationSort = 1;

    public static function getNavigationBadge(): ?string
    {
        return (new self)->allMails()->count(); // TODO: Change the autogenerated stub
    }

    public static function getNavigationGroup(): ?string
    {
        return __('Advanced'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationLabel(): string
    {
        return __('My Mails');
    }

    public function getTitle(): string|Htmlable
    {
        return __('My Mails');
    }

    public function mount(): void
    {
        if (! auth()->check()) {
            redirect()->route('filament.app.auth.login');
        }
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                SimpleAlert::make('noti')
                    ->warning()
                    ->description(__('You can only delete your emails. This action will delete them permanently (cannot be recovered)!')),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->query(Mail::query()->with('messages')->withTrashed()->where('user_id', auth()->id()))
            ->columns([
                TextColumn::make('email')
                    ->label('Email')
                    ->translateLabel()
                    ->searchable()
                    ->sortable(),

                TextColumn::make('messages_count')
                    ->label('Messages')
                    ->counts('messages')
                    ->badge()
                    ->icon('heroicon-o-envelope'),

                TextColumn::make('created_at')
                    ->label('Created At')
                    ->translateLabel()
                    ->sortable(),

                TextColumn::make('deleted_at')
                    ->label('Deleted At')
                    ->translateLabel()
                    ->sortable(),

            ])
            ->defaultPaginationPageOption(25)
            ->defaultSort('created_at', 'desc')
            ->actions([
                DeleteAction::make()
                    ->action(function (Mail $record) {
                        if (! $record->isOwnedBy($this->getUserClient())) {
                            Notification::make()
                                ->title(__('You can only delete your own mails.'))
                                ->danger()
                                ->send();

                            return;
                        }
                        $record->forceDelete();

                        Notification::make()
                            ->title(__('Mails deleted successfully.'))
                            ->success()
                            ->send();
                    }),
            ])
            ->bulkActions([
                BulkAction::make('delete_selected')
                    ->label('Delete Selected')
                    ->action(function (Collection $records) {
                        $user = $this->getUserClient();
                        $invalidMails = $records->filter(function ($record) use ($user) {
                            return $record->isOwnedBy($user);
                        });

                        if ($invalidMails->isNotEmpty()) {
                            Notification::make()
                                ->title(__('You can only delete your own mails.'))
                                ->danger()
                                ->send();

                            return;
                        }

                        // Nếu hợp lệ: Xóa những mail này
                        $records->each(function (Mail $record) {
                            $record->forceDelete();
                        });

                        Notification::make()
                            ->title(__('Mails deleted successfully.'))
                            ->success()
                            ->send();
                    })
                    ->requiresConfirmation()
                    ->deselectRecordsAfterCompletion(),
            ]);
    }
}
