<?php

namespace App\Filament\App\Pages;

use App\Models\Domain;
use App\Services\DomainMxService;
use App\Services\UserFeatureService;
use App\Traits\HasMailable;
use App\Traits\Toastable;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Notifications\Notification;
use Filament\Pages\Page;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Concerns\InteractsWithTable;
use Filament\Tables\Contracts\HasTable;
use Filament\Tables\Table;
use Illuminate\Contracts\Support\Htmlable;

class UserDomains extends Page implements HasForms, HasTable
{
    use HasMailable, InteractsWithForms, InteractsWithTable, Toastable;

    protected static ?string $navigationIcon = 'heroicon-o-globe-alt';

    protected static bool $shouldRegisterNavigation = true;

    protected static string $view = 'filament.app.pages.user-domains';

    protected static ?string $slug = 'my-domains';

    protected static ?int $navigationSort = 2;

    private string $modalTitle = '';

    private string $modalDescription = '';

    private array $expectedMxHosts = [];

    public function mount(): void
    {
        if (! auth()->check()) {
            redirect()->route('filament.app.auth.login');
        }

        $this->expectedMxHosts = setting('mail.servers', []);
    }

    public static function getNavigationLabel(): string
    {
        return __('My Domains');
    }

    public static function getNavigationGroup(): ?string
    {
        return __('Advanced'); // TODO: Change the autogenerated stub
    }

    public function getTitle(): string|Htmlable
    {
        return __('My Domains');
    }

    public static function getNavigationBadge(): ?string
    {
        return Domain::query()->whereNotNull('user_id')->whereUserId(auth()->id())->count(); // TODO: Change the autogenerated stub
    }

    protected function getHeaderActions(): array
    {
        return [
            \Filament\Actions\Action::make('create')
                ->label('Add new')
                ->translateLabel()
                ->icon('heroicon-o-plus')
                ->beforeFormFilled(function (\Filament\Actions\Action $action) {
                    $upgradeAction = \Filament\Notifications\Actions\Action::make('Upgrade')
                        ->label('Upgrade')
                        ->translateLabel()
                        ->button()
                        ->icon('heroicon-o-arrow-up-circle')
                        ->url(Pricing::getUrl(panel: 'app'));

                    $user = auth()->user();
                    $featureService = new UserFeatureService($user);
                    $userDomainCount = $user->domains()->count();

                    $planAliasDomainCount = (int) $featureService->getFeatureValue('alias_domains');

                    if ($planAliasDomainCount <= 0) {
                        $this->modalTitle = __('Unable to create a new domain.');
                        $this->modalDescription = __('Your current plan does not allow creating a new domain. Please upgrade your plan.');
                        $this->dispatch('open-modal', id: 'limit-domain-modal');

                        //                        Notification::make()
                        //                            ->title(__('Unable to create a new domain.'))
                        //                            ->body(__('Your current plan does not allow creating a new domain. Please upgrade your plan.'))
                        //                            ->danger()
                        //                            ->persistent()
                        //                            ->actions([
                        //                                $upgradeAction
                        //                            ])
                        //                            ->send();
                        $action->cancel();
                    } elseif ($userDomainCount >= $planAliasDomainCount) {
                        $this->modalTitle = __('Unable to create a new domain.');
                        $this->modalDescription = __('You have reached the maximum number of domains allowed by your plan. Please upgrade your plan.');
                        $this->dispatch('open-modal', id: 'limit-domain-modal');

                        //                        Notification::make()
                        //                            ->title(__('Unable to create a new domain.'))
                        //                            ->body(__('You have reached the maximum number of domains allowed by your plan. Please upgrade your plan.'))
                        //                            ->danger()
                        //                            ->persistent()
                        //                            ->actions([
                        //                                $upgradeAction
                        //                            ])
                        //                            ->send();
                        $action->cancel();
                    }
                })
                ->action(function (array $data, \Filament\Actions\Action $action) {
                    $data['user_id'] = auth()->id();
                    $data['is_private'] = true;
                    Domain::create($data);

                    Notification::make()
                        ->title(__('Domain created successfully'))
                        ->success()
                        ->send();
                })
                ->form([
                    TextInput::make('name')
                        ->unique(ignoreRecord: true)
                        ->rules(['unique:domains,name'])
                        ->label('Domain')
                        ->translateLabel()
                        ->required()
                        ->rule('regex:/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/')
                        ->maxLength(255),

                    Toggle::make('is_active')
                        ->default(true)
                        ->label('Active')
                        ->translateLabel()
                        ->hint(__('When disabled, domain will not be displayed in homepage'))
                        ->hintIcon('heroicon-o-information-circle'),
                    //                    Toggle::make('is_private')
                    //                        ->label('Private')
                    //                        ->hint('When enabled, domain will not be displayed for another users')
                    //                        ->hintIcon('heroicon-o-information-circle'),
                ]),
        ];
    }

    protected function mutateFormDataBeforeCreate(array $data): array
    {
        $data['user_id'] = auth()->id();

        return $data;
    }

    public function table(Table $table): Table
    {
        return $table
            ->paginated(false)
            ->query(Domain::query()->whereNotNull('user_id')->whereUserId(auth()->id()))
            ->columns([
                TextColumn::make('name')->label('Domain')->translateLabel(),
                TextColumn::make('created_at')->label('Created At')->translateLabel(),

                IconColumn::make('is_active')
                    ->boolean('is_active')
                    ->alignCenter()
                    ->label('Active')
                    ->translateLabel(),

                IconColumn::make('is_private')
                    ->boolean('is_private')
                    ->alignCenter()
                    ->label('Private')
                    ->translateLabel(),

                //                IconColumn::make('mx_status')
                //                    ->boolean('is_private')
                //                    ->alignCenter()
                //                    ->label('MX Record state')
                //                    ->translateLabel()
                //                    ->state(function ($record) {
                //                        $service = new DomainMxService();
                //                        $result = $service->check($record->name, self::$expectedMxHosts);
                //                        if ($result === true) {
                //                            return true;
                //                        }
                //                        return false;
                //                    })
                //                    ->colors([
                //                        'success' => true,
                //                        'danger' => false,
                //                    ])
                //                    ->tooltip(fn($state) => $state === true ? __('MX record is correctly configured!'): __('MX record check failed'))
                //                    ->icons([
                //                        'heroicon-o-check-circle' => true,
                //                        'heroicon-o-x-circle' => false,
                //                    ]),
            ])
//            ->headerActions([
//                CreateAction::make()
//                    ->label('Add new')
//                    ->translateLabel()
//                    ->icon('heroicon-o-plus')
//                    ->beforeFormFilled(function (CreateAction $action) {
//                        $upgradeAction = \Filament\Notifications\Actions\Action::make('Upgrade')
//                            ->label('Upgrade')
//                            ->translateLabel()
//                            ->button()
//                            ->icon('heroicon-o-arrow-up-circle')
//                            ->url(Pricing::getUrl(panel: 'app'));
//
//                        $user = auth()->user();
//                        $featureService = new UserFeatureService($user);
//                        $userDomainCount = $user->domains()->count();
//                        $planAliasDomainCount = (int)$featureService->getFeatureValue('alias_domains');
//                        if ($planAliasDomainCount <= 0) {
//                            Notification::make()
//                                ->title(__('Unable to create a new domain.'))
//                                ->body(__('Your current plan does not allow creating a new domain. Please upgrade your plan.'))
//                                ->danger()
//                                ->persistent()
//                                ->actions([
//                                    $upgradeAction
//                                ])
//                                ->send();
//                            $action->cancel();
//                        }elseif($userDomainCount >= $planAliasDomainCount) {
//                            Notification::make()
//                                ->title(__('Unable to create a new domain.'))
//                                ->body(__('You have reached the maximum number of domains allowed by your plan. Please upgrade your plan.'))
//                                ->danger()
//                                ->persistent()
//                                ->actions([
//                                    $upgradeAction
//                                ])
//                                ->send();
//                            $action->cancel();
//                        }
//                    })
//                ->form([
//                    TextInput::make('name')
//                        ->unique(ignoreRecord: true)
//                        ->label('Domain')
//                        ->required()
//                        ->maxLength(255),
//
//                    Toggle::make('is_active')
//                        ->label('Active')
//                        ->hint('When disabled, domain will not be displayed in homepage')
//                        ->hintIcon('heroicon-o-information-circle'),
//
//                    Toggle::make('is_private')
//                        ->label('Private')
//                        ->hint('When enabled, domain will not be displayed for another users')
//                        ->hintIcon('heroicon-o-information-circle'),
//                ])
//                ->createAnother(false),
//            ])
            ->actions([
                Action::make('check_mx')
                    ->label('MX Check')
                    ->translateLabel()
                    ->icon('heroicon-o-cloud')
                    ->mountUsing(function (Domain $record, Action $action) {
                        $service = new DomainMxService;
                        $result = $service->check($record->name, setting('mail.servers', []));

                        if ($result === true) {
                            $action->modalDescription(__('MX record is correctly configured!'))
                                ->modalIcon('heroicon-o-check-circle')
                                ->modalIconColor('success');
                        } else {
                            $action->modalDescription($result)
                                ->modalIcon('heroicon-o-x-circle')
                                ->modalIconColor('danger');
                        }
                    })
                    ->modalAlignment('center')
                    ->modalFooterActionsAlignment('center')
                    ->modalHeading(__('MX Record check'))
                    ->modalWidth('md')
                    ->modalSubmitAction(false)
                    ->modalCancelActionLabel(__('Close'))
                    ->color('info'),
                EditAction::make()
                    ->form([
                        TextInput::make('name')
                            ->disabled()
                            ->unique(ignoreRecord: true)
                            ->label('Domain')
                            ->required()
                            ->rule('regex:/^(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/')
                            ->translateLabel()
                            ->maxLength(255),

                        Toggle::make('is_active')
                            ->label('Active')
                            ->hint('When disabled, domain will not be displayed in homepage')
                            ->hintIcon('heroicon-o-information-circle'),

                        //                        Toggle::make('is_private')
                        //                            ->label('Private')
                        //                            ->hint('When enabled, domain will not be displayed for another users')
                        //                            ->hintIcon('heroicon-o-information-circle'),
                    ]),
                DeleteAction::make(),
            ]);
    }
}
